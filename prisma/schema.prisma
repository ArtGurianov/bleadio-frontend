// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Use one by one when prototyping initial database with the command:
// $npx prisma db push
// After both steps are done, it doesn't matter which url stays here
// since they both get overwritten in PrismaClient constructor
//
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id                            String          @id @default(auto()) @map("_id") @db.ObjectId
  name                          String?
  email                         String?         @unique
  emailVerified                 DateTime?
  image                         String?
  apiKey                        String          @default(uuid())
  tgUserId                      Int?
  billingPeriodStart            DateTime        @default(now())
  billingPeriodMessagesSent     Int             @default(0)
  accounts                      Account[]
  sessions                      Session[]
  createdAt                     DateTime        @default(now())
  updatedAt                     DateTime        @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
